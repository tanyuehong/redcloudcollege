<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.redskt.classroom.mapper.RedInterviewQuestionMapper">

    <resultMap id="interviewQuestionMap" type="com.redskt.classroom.entity.vo.RedInterviewQuestionVo">
        <id column="qid" property="qId"/>
        <id column="uid" property="uId"/>
        <id column="pId" property="pId"/>
        <id column="nickname" property="nickname"/>
        <id column="avatar" property="avatar"/>
        <id column="sNum" property="sNum"/>
        <id column="title" property="title"/>
        <id column="type" property="type"/>
        <id column="deep" property="deep"/>
        <id column="typeString" property="typeString"/>
        <id column="content" property="content"/>
        <id column="answer" property="answer"/>
        <id column="reply" property="reply"/>
        <id column="allMeet" property="allMeet"/>
        <id column="frequency" property="frequency"/>
        <id column="readCount" property="readCount"/>
        <id column="collect" property="collect"/>
        <id column="good" property="good"/>
        <id column="price" property="price"/>
        <id column="hotum" property="hotnum"/>
        <id column="gmt_create" property="gmtCreate"/>

        <collection property="tags" resultMap="interviewTagMap">
        </collection>
    </resultMap>

    <resultMap id="interviewTagMap" type="com.redskt.classroom.entity.RedCategoryTag">
        <id column="ctid" property="id"/>
        <id column="tname" property="name"/>
        <id column="timg" property="img"/>
        <id column="tsort" property="sort"/>
        <id column="asktype" property="asktype"/>
    </resultMap>

    <select id="getHomeInterviewQuestionList" resultMap="interviewQuestionMap">
        SELECT qustion.id as qId,qustion.title,qustion.snum as sNum,qustion.type,qustion.content,qustion.deep,qustion.collect,qustion.readcount as readCount,qustion.hotnum,qustion.price,qustion.good,qustion.gmt_create,user.nickname,
        qustion.uid,(pmeet+tmeet+smeet) as allMeet,(select count(reply.id) as replaycount from red_interview_answer reply where reply.qid=qustion.id) as reply
        ,tag.id as ctid,tag.name as tname,tag.img as timg,tag.sort as tsort
        FROM red_interview_question qustion
        LEFT OUTER JOIN red_class_user user ON qustion.uid=user.id
        LEFT OUTER JOIN red_interview_question_tag tags ON tags.qid = qustion.id
        LEFT OUTER JOIN red_category_tag tag ON tag.id = tags.tid
        <if test="tId != null">
            where tag.id = #{tId}
        </if>
        <if test="qid != null">
            and  qId != #{qid}
        </if>
        <if test="sort==1">
            ORDER BY qustion.hotnum
        </if>
        <if test="sort==2">
            ORDER BY qustion.gmt_create
        </if>
        <if test="sort==3">
            ORDER BY qustion.readcount
        </if>
        <if test="sort==4">
            ORDER BY reply
        </if>
        DESC limit #{size}
    </select>

    <select id="getPositionQuestionList" resultMap="interviewQuestionMap">
        SELECT question.id as qId,question.title,question.snum,question.type,question.content,question.deep,question.collect,question.readcount,question.hotnum,question.price,question.good,question.gmt_create,user.nickname,
        question.uid,(pmeet+tmeet+smeet) as allMeet, convert((pmeet+tmeet+smeet)/readcount,decimal(15,2)) as frequency,(select count(reply.id) as replaycount from red_interview_answer reply where reply.qid=question.id) as reply
        ,tag.id as ctid,tag.name as tname,tag.img as timg,tag.sort as tsort
        FROM red_interview_question question
        LEFT OUTER JOIN red_class_user user ON user.id=question.uid
        LEFT OUTER JOIN red_interview_question_tag tags ON tags.qid = question.id
        LEFT OUTER JOIN red_category_tag tag ON tag.id = tags.tid
        LEFT OUTER JOIN red_interview_question_position tposition ON tposition.qid = question.id
        where tposition.pid = #{pid}
        <if test="sId!=null">
            and tposition.sid = #{sId}
        </if>
        <if test="sort==1">
            ORDER BY question.snum
        </if>
        <if test="sort==2">
            ORDER BY reply
        </if>
        <if test="sort==3">
            ORDER BY question.hotnum
        </if>
        <if test="sort==4">
            ORDER BY ddegree
        </if>
        <if test="sort==5">
            ORDER BY frequency
        </if>
        <if test="orderType==1">
            ASC
        </if>
        <if test="orderType==2">
            DESC
        </if>
        limit #{size}
    </select>

    <update id="updateQuestionReadCount">
        update red_interview_question
        set readcount = #{readCount}
        where id = #{id}
    </update>

    <select id="getQuestionDetail" resultMap="interviewQuestionMap">
        SELECT question.id as qId,qPosition.pid as pId,question.uid,question.title,question.type,question.content,question.answer,question.collect,question.readcount,question.hotnum,question.price,question.deep,(tmeet+smeet+pmeet) as allMeet,question.good,question.gmt_create, user.nickname,
            user.avatar,(select count(reply.id) from red_ask_reply reply where reply.qid=question.id) as reply,tag.id as ctid,tag.name as tname,tag.img as timg,tag.sort as tsort
        FROM red_interview_question question
        LEFT OUTER JOIN red_interview_question_position qPosition ON qPosition.qid=question.id
        LEFT OUTER JOIN red_class_user user ON question.uid=user.id
        LEFT OUTER JOIN red_interview_question_tag tags ON tags.qid = question.id
        LEFT OUTER JOIN red_category_tag tag ON tag.id = tags.tid
        WHERE question.id=#{tId}
    </select>

    <update id="addGoodCount">
        update red_interview_question
        set good=good+1
        where id = #{qid}
    </update>

    <update id="prepGoodCount">
        update red_interview_question
        set good=good-1
        where id = #{qid}
    </update>

    <update id="addCollectCount">
        update red_interview_question
        set collect=collect+1
        where id = #{qid}
    </update>

    <update id="prepCollectCount">
        update red_interview_question
        set collect=collect-1
        where id = #{qid}
    </update>

    <select id="getUserStatus" resultType="com.redskt.classroom.entity.vo.RedUserStateVo">
        SELECT !isnull(collect.id) as isCollect, !isnull(good.id) as goodslect,!isnull(interview.id) as isFocus
        FROM red_interview_question interview
        LEFT OUTER JOIN  red_interview_collect collect on collect.uid = #{uid} and collect.qid = #{qid} and collect.is_deleted = 0
        LEFT OUTER JOIN  red_user_focus focus on focus.uid = #{uid} and focus.fid = interview.uid and focus.is_deleted = 0
        LEFT OUTER JOIN  red_interview_good  good  on good.uid = #{uid} and good.qid = #{qid}
        where interview.id = #{qid}
    </select>

    <update id="updateQustionState">
        update red_interview_question
        set state = #{state}
        where id = #{qid} and uid = #{uid}
    </update>

    <update id="addSmeetCount">
        update red_interview_question
        set smeet=smeet+1
        where id = #{qid}
    </update>

    <update id="addTmeetCount">
        update red_interview_question
        set tmeet=tmeet+1
        where id = #{qid}
    </update>

    <update id="addPmeetCount">
        update red_interview_question
        set pmeet=pmeet+1
        where id = #{qid}
    </update>

    <update id="addUmeetCount">
        update red_interview_question
        set umeet=umeet+1
        where id = #{qid}
    </update>

</mapper>
